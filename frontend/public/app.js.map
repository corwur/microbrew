{"version":3,"sources":["app/application.js","app/gene-structure.js","app/reactome.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnJA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA","file":"public/app.js","sourcesContent":["'use strict';\r\nconst rx = require('rxjs')\r\nvar bootstrap = require('bootstrap')\r\nvar jquery = require('jquery')\r\nvar pileup = require('pileup')\r\nvar cytoscape = require('cytoscape')\r\nvar geneStructure = require('gene-structure');\r\nvar reactome = require('reactome')\r\n\r\nconst geneIdentifierSubject = new rx.Subject()\r\n\r\nconst App = {\r\n\r\n\r\n    selectGene: function(elem, event) {\r\n        event.returnValue = false;\r\n        var geneId = elem.elements[0].value\r\n        var distance = elem.elements[1].value ? elem.elements[1].value : 1\r\n        geneIdentifierSubject.next({ geneId:geneId, distance:distance})\r\n        return false\r\n    },\r\n    clickGene: function(geneId, event) {\r\n        event.returnValue = false;\r\n        document.getElementById(\"selectGeneId\").value=geneId\r\n        document.getElementById(\"gene-id-autocomplete\").innerHTML=\"\"\r\n        return false\r\n    },\r\n    findGene: function(elem) {\r\n        var geneId = elem.value;\r\n        if(geneId && geneId.length >=1) {\r\n            geneStructure.findGene(geneId + \".*\").subscribe(data => {\r\n                var list = document.getElementById(\"gene-id-autocomplete\")\r\n                console.log(JSON.stringify(data))\r\n                var html = '<ul class=\"select-gene\">' +\r\n                    data.genes.map(geneId => '<li><a href=\"#\" onclick=\"App.clickGene(\\'' + geneId + '\\', event)\">' + geneId + '</a></li>').reduce((a,b) => a + b) + '</ul>'\r\n                list.innerHTML = html\r\n            })\r\n        }\r\n    },\r\n\r\n\r\n    getGeneStructure: function(geneIdentifier, distance) {\r\n\r\n        const convertToCyData = function(data) {\r\n            var cyData = []\r\n            for(var index =0; index < data.genes.length ; index++) {\r\n                cyData.push({ group:'nodes',  position: { x: 200, y: 200 }, data: { id:data.genes[index].geneIdentifier, weight:20 } } )\r\n            }\r\n            // for(var index =0; index < data.order.length ; index++) {\r\n            //     cyData.push({ group:'edges', data: { organism:data.order[index].organism,  id:\"order\" + index, source:data.order[index].from, target:data.order[index].to } } )\r\n            // }\r\n            for(var index =0; index < data.backbone.length ; index++) {\r\n                cyData.push({ group:'edges', data: { id:\"backbone\" + index, source:data.backbone[index].from, target:data.backbone[index].to } } )\r\n            }\r\n\r\n            return cyData;\r\n        }\r\n        var observable = App.geneStructure.getStructure(geneIdentifier, distance);\r\n        observable.subscribe(data => {\r\n            var cyData = convertToCyData(data);\r\n            App.cy.remove('*');\r\n            App.cy.add(cyData);\r\n            App.cy.style().selector('edge').style(\r\n                {\r\n                    \"curve-style\": \"bezier\",\r\n                    label:\"data(id)\"\r\n                }\r\n            ).update()\r\n            App.cy.layout({ name:'grid'}).run()\r\n        })\r\n    },\r\n\r\n    getPathwayInformation: function(geneIdentifier) {\r\n        var elem = document.getElementById(\"reactome\")\r\n        reactome.findGene(geneIdentifier).subscribe(\r\n            data => elem.innerHTML = JSON.stringify(data),\r\n            error => elem.innerHTML = \"No pathway data in reactome\")\r\n    },\r\n\r\n\r\n    init(config) {\r\n        geneIdentifierSubject.subscribe((req) => App.getGeneStructure(req.geneId,req.distance))\r\n        geneIdentifierSubject.subscribe((req) => console.log(\"gene identifier is: \"  + JSON.stringify(req)))\r\n        geneIdentifierSubject.subscribe((req) => App.getPathwayInformation(req.geneId))\r\n\r\n        App.geneStructure = geneStructure;\r\n        App.cy = cytoscape({\r\n            container: document.getElementById('cy'),\r\n            elements: [\r\n            ],\r\n\r\n            style: [ // the stylesheet for the graph\r\n                {\r\n                    selector: 'node',\r\n                    style: {\r\n                        'background-color': '#666',\r\n                        'label': 'data(id)'\r\n                    }\r\n                },\r\n\r\n                {\r\n                    selector: 'edge',\r\n                    style: {\r\n                        'width': 3,\r\n                        'line-color': '#ccc',\r\n                        'target-arrow-color': '#ccc',\r\n                        'target-arrow-shape': 'triangle'\r\n                    }\r\n                }\r\n            ],\r\n\r\n            layout: {\r\n                name: 'grid',\r\n                rows: 1\r\n            }\r\n        });\r\n\r\n\r\n        console.log('App initialized.');\r\n\r\n\r\n        // var pileup = require('pileup');\r\n        var p = pileup.create(config.node, {\r\n            range: {contig: 'chr17', start: 7512384, stop: 7512544},\r\n            tracks: [\r\n                {\r\n                    viz: pileup.viz.genome(),\r\n                    isReference: true,\r\n                    data: pileup.formats.twoBit({\r\n                        url: 'http://www.biodalliance.org/datasets/hg19.2bit'\r\n                    }),\r\n                    name: 'Reference'\r\n                },\r\n                {\r\n                    viz: pileup.viz.pileup(),\r\n                    data: pileup.formats.bam({\r\n                        url: '/test-data/synth3.normal.17.7500000-7515000.bam',\r\n                        indexUrl: '/test-data/synth3.normal.17.7500000-7515000.bam.bai'\r\n                    }),\r\n                    cssClass: 'normal',\r\n                    name: 'Alignments'\r\n                }\r\n            ]\r\n        });\r\n    }\r\n};\r\n\r\nmodule.exports = App;","const rx = require(\"rxjs\")\r\nconst axios = require(\"axios\")\r\n\r\nconst GeneStructure = {\r\n\r\n    findGene(geneIdentifier) {\r\n        return new rx.Observable( ( observer ) => {\r\n            axios.get( '/api/structure/gene' + '?search=' + geneIdentifier)\r\n                .then( ( response ) => {\r\n                    observer.next( response.data );\r\n                    observer.complete();\r\n                } )\r\n                .catch( ( error ) => {\r\n                    observer.error( error );\r\n                } );\r\n        });\r\n    },\r\n\r\n    getStructure(geneIdentifier, distance) {\r\n        return new rx.Observable( ( observer ) => {\r\n            axios.get( '/api/structure/gene/' + geneIdentifier + '?distance=' + distance )\r\n                .then( ( response ) => {\r\n                    observer.next( response.data );\r\n                    observer.complete();\r\n                } )\r\n                .catch( ( error ) => {\r\n                    observer.error( error );\r\n                } );\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = GeneStructure;","const rx = require(\"rxjs\")\r\nconst axios = require(\"axios\")\r\n\r\nconst Reactome = {\r\n    findGene: function(geneIdentifier) {\r\n        return new rx.Observable( ( observer ) => {\r\n            axios.get( '/api/reactome/ContentService/search/query?query=' + geneIdentifier)\r\n                .then( ( response ) => {\r\n                    observer.next( response.data );\r\n                    observer.complete();\r\n                } )\r\n                .catch( ( error ) => {\r\n                    observer.error( error );\r\n                } );\r\n        });\r\n    }\r\n}\r\nmodule.exports = Reactome;"]}